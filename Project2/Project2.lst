Microsoft (R) Macro Assembler Version 14.12.25835.0	    05/31/18 02:26:24
main.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat, stdcall
main.asm(4) : warning A4011:multiple .MODEL directives found : .MODEL ignored

				.stack 4096
				ExitProcess PROTO, dwexitcode:DWORD

 00000000			.data
 = 00000032			w = 50
 = 00000019			h = 25
 = 000004E2			mazesize = 1250
 = 0000001E			ratio = 30
 = 00000032			s = 50
 = 000004AF			d = 1199
 00000000  00000753 [		maze byte 1875 dup(?) ; 1為障礙物 0是路 2是人 3是目標 4是怪獸 5是分數
	    00
	   ]
 00000753 00000032		pos dword 50
 00000757  00002710 [		visit dword 10000 dup(?)
	    00000000
	   ]
 0000A397  000004E2 [		re byte 1250 dup(0);1為造訪過 0為無
	    00
	   ]
 0000A879 00000000		count dword 0
 0000A87D 00			che byte 0
 0000A87E 20 20 20 20 20	str1 byte "      Score: ",0
	   20 53 63 6F 72
	   65 3A 20 00
 0000A88C 00000000		score dword 0
 0000A890 43 6F 6E 67 72	str2 byte "Congratulate!!!! you win.",0
	   61 74 75 6C 61
	   74 65 21 21 21
	   21 20 79 6F 75
	   20 77 69 6E 2E
	   00
 0000A8AA 79 6F 75 20 61	str3 byte "you are lost",0
	   72 65 20 6C 6F
	   73 74 00
 0000A8B7 00			stituation byte 0;
 0000A8B8 54 68 65 20 72	rule byte "The rule of game:",0dh,0ah, 
	   75 6C 65 20 6F
	   66 20 67 61 6D
	   65 3A 0D 0A 31
	   2E 20 54 68 65
	   72 65 20 61 72
	   65 20 66 6F 75
	   72 20 69 6E 73
	   74 72 75 74 69
	   6F 6E 2E 20 57
	   20 69 73 20 75
	   70 2E 20 53 20
	   69 73 20 64 6F
	   77 6E 2E 20 44
	   20 69 73 20 72
	   69 67 68 74 2E
	   20 20 41 20 69
	   73 20 6C 65 66
	   74 2E 0D 0A 32
	   2E 20 59 6F 75
	   20 61 72 65 20
	   74 68 65 20 77
	   68 69 74 65 20
	   62 6C 6F 63 6B
	   20 61 74 20 74
	   68 65 20 6C 65
	   66 74 20 74 6F
	   70 2E 20 57 68
	   65 6E 20 79 6F
	   75 20 72 65 61
	   63 68 20 74 6F
	   20 74 68 65 20
	   64 65 73 74 69
	   6E 61 74 69 6F
	   6E 2C 74 68 65
	   20 62 6C 75 65
	   20 62 6C 6F 63
	   6B 2C 20 79 6F
	   75 20 77 69 6C
	   6C 20 77 69 6E
	   2E 0D 0A 33 2E
	   20 54 68 65 20
	   72 65 64 20 62
	   6C 6F 63 6B 20
	   61 72 65 20 77
	   61 6C 6C 73 20
	   77 68 69 63 68
	   20 63 61 6E 6E
	   6F 74 20 70 61
	   73 73 20 69 74
	   2C 20 74 68 65
	   20 62 6C 61 63
	   6B 20 62 6C 6F
	   63 6B 20 69 73
	   20 72 6F 61 64
	   2C 20 61 6E 64
	   20 74 68 65 20
	   79 65 6C 6C 6F
	   77 20 2D 20 69
	   73 20 73 63 6F
	   72 65 0D 0A 34
	   2E 20 54 68 65
	   20 67 72 65 65
	   6E 20 40 20 69
	   73 20 6D 6F 6E
	   73 74 65 72 73
	   2E 20 57 68 65
	   6E 20 79 6F 75
	   20 74 6F 75 63
	   68 20 74 68 65
	   6D 2C 20 74 68
	   65 20 67 61 6D
	   65 20 77 69 6C
	   6C 20 62 65 20
	   6F 76 65 72 2E
	   0D 0A 00
						  "1. There are four instrution.",
						  " W is up.",
						  " S is down.",
						  " D is right.",
						  "  A is left.",0dh,0ah,
						  "2. You are the white block at the left top. When you reach to the destination,the blue block, you will win.",0dh,0ah,
						  "3. The red block are walls which cannot pass it, the black block is road, and the yellow - is score",0dh,0ah,
						  "4. The green @ is monsters. When you touch them, the game will be over.",0dh,0ah,0
 00000000			.code
 00000000			main proc
					
 00000000  E8 00000000 E		call Randomize
					
 00000005			bwhile:

 00000005  E8 0000070A			call build
					;call Clrscr
					;call print
					
 0000000A  6A 32			push 50;
 0000000C  C6 05 0000A3C9 R		mov re[50], 1
	   01
 00000013  FF 05 0000A879 R		inc count

 00000019				bbfs:
						.if(che == 1)
 00000022  E9 0000013F					jmp endbfs;
						.endif

						.if(count == mazesize)
 00000033  E9 0000012E					jmp endbfs;
						.endif
						.if(count == 0)
 00000041  E9 00000120					jmp endbfs;
						.endif

 00000046  58					pop eax

 00000047  FF 0D 0000A879 R			dec count
						;右
 0000004D  8B D0				mov edx, eax;
 0000004F  42					inc edx;

						.if(edx >= 0 && edx < mazesize && re[edx] == 0)
 00000066  80 BA 00000000 R				cmp maze[edx], 0
	   00
 0000006D  74 0B					je L1
							
 0000006F  80 BA 00000000 R				cmp maze[edx], 3
	   03
 00000076  74 12					je L2
 00000078  75 17					jne L3

 0000007A						L1:
 0000007A  52						push edx
							;mov maze[edx], 2
 0000007B  C6 82 0000A397 R				mov re[edx], 1
	   01
 00000082  FF 05 0000A879 R				inc count
 00000088  EB 07					jmp L3
 0000008A						L2:
 0000008A  C6 05 0000A87D R				mov che, 1
	   01

 00000091						L3:
						.endif
						 
						 ;左
 00000091  8B D0				 mov edx, eax;
 00000093  4A					 dec edx;

						.if(edx >= 0 && edx < mazesize && re[edx] == 0)
 000000AA  80 BA 00000000 R				cmp maze[edx], 0
	   00
 000000B1  74 0B					je L4
							;jne L6

 000000B3  80 BA 00000000 R				cmp maze[edx], 3
	   03
 000000BA  74 12					je L5
 000000BC  75 17					jne L6

 000000BE						L4:
 000000BE  52						push edx
							;mov maze[edx], 2
 000000BF  C6 82 0000A397 R				mov re[edx], 1
	   01
 000000C6  FF 05 0000A879 R				inc count
 000000CC  EB 07					jmp L6
 000000CE						L5:
 000000CE  C6 05 0000A87D R				mov che, 1
	   01
 000000D5						L6:

						.endif

						;下
 000000D5  8B D0				mov edx, eax;
 000000D7  83 C2 32				add edx, w;

						.if(edx >= 0 && edx < mazesize && re[edx] == 0)
 000000F0  80 BA 00000000 R				cmp maze[edx], 0
	   00
 000000F7  74 0B					je L7
							;jne L9

 000000F9  80 BA 00000000 R				cmp maze[edx], 3
	   03
 00000100  74 12					je L8
 00000102  75 17					jne L9

 00000104						L7:
 00000104  52						push edx
 00000105  C6 82 0000A397 R				mov re[edx], 1
	   01
							;mov maze[edx], 2
 0000010C  FF 05 0000A879 R				inc count
 00000112  EB 07					jmp L9
 00000114						L8:
 00000114  C6 05 0000A87D R				mov che, 1
	   01

 0000011B						L9:
						.endif

						;下
 0000011B  8B D0				mov edx, eax;
 0000011D  83 EA 32				sub edx, w;

						.if(edx >= 0 && edx < mazesize && re[edx] == 0)
 00000136  80 BA 00000000 R				cmp maze[edx], 0
	   00
 0000013D  74 0B					je L10
							;jne L12

 0000013F  80 BA 00000000 R				cmp maze[edx], 3
	   03
 00000146  74 12					je L11
 00000148  75 17					jne L12

 0000014A						L10:
 0000014A  52						push edx
 0000014B  C6 82 0000A397 R				mov re[edx], 1
	   01
							;mov maze[edx], 2
 00000152  FF 05 0000A879 R				inc count
 00000158  EB 07					jmp L12
 0000015A						L11:
 0000015A  C6 05 0000A87D R				mov che, 1
	   01

 00000161						L12:
						.endif
					;call print;
 00000161  E9 FFFFFEB3			jmp bbfs
 00000166				endbfs:
					;call print;
					.if(che == 1)
 0000016F  EB 05				jmp endwhile;
					.endif

 00000171  E9 FFFFFE8F			jmp bwhile

 00000176			endwhile:
 00000176  BA 0000A8B8 R		mov edx ,offset rule
 0000017B  E8 00000000 E		call writestring

 00000180			start:
					
 00000180  E8 00000670			call print
 00000185  E8 000003E4			call master_move
 0000018A  E8 00000000 E		call readkey;
 0000018F  75 02			jnz startend
					;mov eax, 1000;
					;call delay
					
 00000191  EB ED		jmp start
 00000193			startend:
 00000193  E8 0000004D			call move
 00000198  EB E6			jmp start
 0000019A			endgame::
 0000019A  E8 00000656			call print
 0000019F  E8 00000000 E		call crlf
 000001A4  E8 00000000 E		call crlf
					.if(stituation == 1)
 000001B2  BA 0000A890 R			mov edx ,offset str2
 000001B7  E8 00000000 E			call writestring
					.endif

					.if(stituation == 2)
 000001C5  BA 0000A8AA R			mov edx ,offset str3
 000001CA  E8 00000000 E			call writestring
					.endif
 000001CF  E8 00000000 E		call crlf
 000001D4  E8 00000000 E		call crlf
					
 000001D9  E8 00000000 E		call waitmsg
					Invoke ExitProcess, 0

 000001E5			main endp
 000001E5			move proc uses ecx edi
				.if(al == 'D' || al == 'd')
 000001F3  8B 0D 00000753 R			mov ecx, pos
 000001F9  8B 3D 00000753 R			mov edi, pos
 000001FF  83 C7 01				add edi, 1
						.if(edi >= 0 && edi <= 1199 && maze[edi] == 5)
 00000218  89 3D 00000753 R				mov pos, edi
 0000021E  C6 87 00000000 R				mov maze[edi], 2
	   02
 00000225  C6 81 00000000 R				mov maze[ecx], 0
	   00
 0000022C  FF 05 0000A88C R				inc score
						.endif
						.if(edi >= 0 && edi <= 1199 && maze[edi] == 3)
 00000248  89 3D 00000753 R				mov pos, edi
 0000024E  C6 87 00000000 R				mov maze[edi], 2
	   02
 00000255  C6 81 00000000 R				mov maze[ecx], 0
	   00
 0000025C  C6 05 0000A8B7 R				mov stituation, 1
	   01
 00000263  E9 FFFFFF32					jmp endgame
						.endif
						.if(edi >= 0 && edi < 1199 && maze[edi] == 4)
 0000027E  89 3D 00000753 R				mov pos, edi
 00000284  C6 87 00000000 R				mov maze[edi], 4
	   04
 0000028B  C6 81 00000000 R				mov maze[ecx], 0
	   00
 00000292  C6 05 0000A8B7 R				mov stituation, 2
	   02
 00000299  E9 FFFFFEFC					jmp endgame
						.endif
						.if(edi >= 0 && edi < 1199 && maze[edi] == 0)
 000002B4  89 3D 00000753 R				mov pos, edi
 000002BA  C6 87 00000000 R				mov maze[edi], 2
	   02
 000002C1  C6 81 00000000 R				mov maze[ecx], 0
	   00
						.endif	
					.endif
					
					.if(al == 'W' || al == 'w')
 000002D4  8B 0D 00000753 R			mov ecx, pos
 000002DA  8B 3D 00000753 R			mov edi, pos
 000002E0  83 EF 32				sub edi, w
						.if(edi >= 0 && edi <= 1199 && maze[edi] == 5)
 000002F9  89 3D 00000753 R				mov pos, edi
 000002FF  C6 87 00000000 R				mov maze[edi], 2
	   02
 00000306  C6 81 00000000 R				mov maze[ecx], 0
	   00
 0000030D  FF 05 0000A88C R				inc score
						.endif

						.if(edi >= 0 && edi < 1199 && maze[edi] == 4)
 00000329  89 3D 00000753 R				mov pos, edi
 0000032F  C6 87 00000000 R				mov maze[edi], 4
	   04
 00000336  C6 81 00000000 R				mov maze[ecx], 0
	   00
 0000033D  C6 05 0000A8B7 R				mov stituation, 2
	   02
 00000344  E9 FFFFFE51					jmp endgame
						.endif
						.if(edi >= 0 && edi <= 1199 && maze[edi] == 3)
 0000035F  89 3D 00000753 R				mov pos, edi
 00000365  C6 87 00000000 R				mov maze[edi], 2
	   02
 0000036C  C6 81 00000000 R				mov maze[ecx], 0
	   00
 00000373  C6 05 0000A8B7 R				mov stituation, 1
	   01
 0000037A  E9 FFFFFE1B					jmp endgame
						.endif
						.if(edi >= 0 && edi < 1199 && maze[edi] == 0)
 00000395  89 3D 00000753 R				mov pos, edi
 0000039B  C6 87 00000000 R				mov maze[edi], 2
	   02
 000003A2  C6 81 00000000 R				mov maze[ecx], 0
	   00
						.endif	
					.endif

					.if(al == 's' || al == 'S')
 000003B5  8B 0D 00000753 R			mov ecx, pos
 000003BB  8B 3D 00000753 R			mov edi, pos
 000003C1  83 C7 32				add edi, w
						.if(edi >= 0 && edi <= 1199 && maze[edi] == 5)
 000003DA  89 3D 00000753 R				mov pos, edi
 000003E0  C6 87 00000000 R				mov maze[edi], 2
	   02
 000003E7  C6 81 00000000 R				mov maze[ecx], 0
	   00
 000003EE  FF 05 0000A88C R				inc score
						.endif

						.if(edi >= 0 && edi < 1199 && maze[edi] == 4)
 0000040A  89 3D 00000753 R				mov pos, edi
 00000410  C6 87 00000000 R				mov maze[edi], 4
	   04
 00000417  C6 81 00000000 R				mov maze[ecx], 0
	   00
 0000041E  C6 05 0000A8B7 R				mov stituation, 2
	   02
 00000425  E9 FFFFFD70					jmp endgame
						.endif
						.if(edi >= 0 && edi <= 1199 && maze[edi] == 3)
 00000440  89 3D 00000753 R				mov pos, edi
 00000446  C6 87 00000000 R				mov maze[edi], 2
	   02
 0000044D  C6 81 00000000 R				mov maze[ecx], 0
	   00
 00000454  C6 05 0000A8B7 R				mov stituation, 1
	   01
 0000045B  E9 FFFFFD3A					jmp endgame
						.endif
						.if(edi >= 0 && edi < 1199 && maze[edi] == 0)
 00000476  89 3D 00000753 R				mov pos, edi
 0000047C  C6 87 00000000 R				mov maze[edi], 2
	   02
 00000483  C6 81 00000000 R				mov maze[ecx], 0
	   00
						.endif	
					.endif

					.if(al == 'a' || al == 'A')
 00000496  8B 0D 00000753 R			mov ecx, pos
 0000049C  8B 3D 00000753 R			mov edi, pos
 000004A2  83 EF 01				sub edi, 1
						.if(edi >= 0 && edi <= 1199 && maze[edi] == 5)
 000004BB  89 3D 00000753 R				mov pos, edi
 000004C1  C6 87 00000000 R				mov maze[edi], 2
	   02
 000004C8  C6 81 00000000 R				mov maze[ecx], 0
	   00
 000004CF  FF 05 0000A88C R				inc score
						.endif

						.if(edi >= 0 && edi < 1199 && maze[edi] == 4)
 000004EB  89 3D 00000753 R				mov pos, edi
 000004F1  C6 87 00000000 R				mov maze[edi], 4
	   04
 000004F8  C6 81 00000000 R				mov maze[ecx], 0
	   00
 000004FF  C6 05 0000A8B7 R				mov stituation, 2
	   02
 00000506  E9 FFFFFC8F					jmp endgame
						.endif
						.if(edi >= 0 && edi <= 1199 && maze[edi] == 3)
 00000521  89 3D 00000753 R				mov pos, edi
 00000527  C6 87 00000000 R				mov maze[edi], 2
	   02
 0000052E  C6 81 00000000 R				mov maze[ecx], 0
	   00
 00000535  C6 05 0000A8B7 R				mov stituation, 1
	   01
 0000053C  E9 FFFFFC59					jmp endgame
						.endif
						.if(edi >= 0 && edi < 1199 && maze[edi] == 0)
 00000557  89 3D 00000753 R				mov pos, edi
 0000055D  C6 87 00000000 R				mov maze[edi], 2
	   02
 00000564  C6 81 00000000 R				mov maze[ecx], 0
	   00
						.endif	
					.endif
				ret
 0000056E			move endp 

 0000056E			master_move proc uses ecx eax ebx esi
 00000572  B9 000004AF		mov ecx, 1199
 00000577			L1:
 00000577  80 B9 00000000 R		cmp maze[ecx], 4
	   04
 0000057E  74 07			je  L2 
 00000580				L3:
 00000580  E2 F5		loop L1
 00000582  E9 00000188		jmp L4
 00000587			L2:
 00000587  8B D9		mov ebx, ecx;
 00000589  B8 00000004		mov eax, 4;
 0000058E  E8 00000000 E	call randomrange;

				.if(eax == 0)
 00000597  8B F3			mov esi, ebx
 00000599  46				inc esi;
					.if(esi > 50 && esi < 1199 && maze[esi] == 0)
 000005B0  C6 86 00000000 R			mov maze[esi], 4;
	   04
 000005B7  C6 83 00000000 R			mov maze[ebx], 0;
	   00
					.endif
					.if(esi > 50 && esi < 1199 && maze[esi] == 2)
 000005D4  C6 86 00000000 R			mov maze[esi], 4;
	   04
 000005DB  C6 83 00000000 R			mov maze[ebx], 0;
	   00
 000005E2  C6 05 0000A8B7 R			mov stituation, 2
	   02
 000005E9  E9 FFFFFBAC				jmp endgame
					.endif
				.endif

				.if(eax == 1)
 000005F3  8B F3			mov esi, ebx
 000005F5  4E				dec esi;
					.if(esi > 50 && esi < 1199 && maze[esi] == 2)
 0000060C  C6 86 00000000 R			mov maze[esi], 4;
	   04
 00000613  C6 83 00000000 R			mov maze[ebx], 0;
	   00
 0000061A  C6 05 0000A8B7 R			mov stituation, 2
	   02
 00000621  E9 FFFFFB74				jmp endgame
					.endif
					.if(esi > 50 && esi < 1199 && maze[esi] == 0)
 0000063C  C6 86 00000000 R			mov maze[esi], 4;
	   04
 00000643  C6 83 00000000 R			mov maze[ebx], 0;
	   00
 0000064A  49					dec ecx
					.endif
				.endif

				.if(eax == 2)
 00000650  8B F3			mov esi, ebx
 00000652  83 C6 32			add esi, w;
					.if(esi > 50 && esi < 1199 && maze[esi] == 2)
 0000066B  C6 86 00000000 R			mov maze[esi], 4;
	   04
 00000672  C6 83 00000000 R			mov maze[ebx], 0;
	   00
 00000679  C6 05 0000A8B7 R			mov stituation, 2
	   02
 00000680  E9 FFFFFB15				jmp endgame
					.endif
					.if(esi > 50 && esi < 1199 && maze[esi] == 0)
 0000069B  C6 86 00000000 R			mov maze[esi], 4;
	   04
 000006A2  C6 83 00000000 R			mov maze[ebx], 0;
	   00
					.endif
				.endif
				.if(eax == 3)
 000006AE  8B F3			mov esi, ebx
 000006B0  83 EE 32			sub esi, w;
					.if(esi > 50 && esi < 1199 && maze[esi] == 2)
 000006C9  C6 86 00000000 R			mov maze[esi], 4;
	   04
 000006D0  C6 83 00000000 R			mov maze[ebx], 0;
	   00
 000006D7  C6 05 0000A8B7 R			mov stituation, 2
	   02
 000006DE  E9 FFFFFAB7				jmp endgame
					.endif
					.if(esi > 50 && esi < 1199 && maze[esi] == 0)
 000006F9  C6 86 00000000 R			mov maze[esi], 4;
	   04
 00000700  C6 83 00000000 R			mov maze[ebx], 0;
	   00
 00000707  83 E9 32				sub ecx, w;
					.endif
				.endif
 0000070A  E9 FFFFFE71		jmp L3
 0000070F			L4:
				ret
 00000714			master_move endp


 00000714			build proc uses esi ecx eax ebx


 00000718  B9 00000019			mov ecx, h;
 0000071D  BE 00000000			mov esi, 0

 00000722			L1:                     ;build maze
 00000722  8B D9			mov ebx, ecx
 00000724  B9 00000032			mov ecx, w;
 00000729				L2:
 00000729  B8 00000064				mov eax, 100;
 0000072E  E8 00000000 E			call randomrange

 00000733  83 F8 1E				cmp eax, ratio
 00000736  77 0B				ja L3
 00000738  EB 00				jmp L4
 0000073A					L4:
 0000073A  C6 86 00000000 R				mov maze[esi], 1;障礙
	   01
 00000741  EB 07					jmp L5
 00000743					L3: 
 00000743  C6 86 00000000 R				mov maze[esi], 0;路
	   00
 0000074A					L5:
 0000074A  C6 86 0000A397 R			mov re[esi], 0
	   00
 00000751  46					inc esi
 00000752  E2 D5			loop L2
 00000754  8B CB			mov ecx ,ebx
 00000756  E2 CA		loop L1
				;邊框
 00000758  B9 00000032		mov ecx, w
 0000075D  BE 00000000		mov esi, 0
 00000762			L6:
 00000762  C6 86 00000000 R		mov maze[esi], 1;
	   01
 00000769  46				inc esi
 0000076A  E2 F6		loop L6

 0000076C  B9 00000032		mov ecx, w
 00000771  BE 000004B0		mov esi, 1200
 00000776			L7:
 00000776  C6 86 00000000 R		mov maze[esi], 1;
	   01
 0000077D  46				inc esi
 0000077E  E2 F6		loop L7

 00000780  B9 00000019		mov ecx, h
 00000785  BE 00000000		mov esi, 0
 0000078A			L8:
 0000078A  C6 86 00000000 R		mov maze[esi], 1;
	   01
 00000791  83 C6 32			add esi, w
 00000794  E2 F4		loop L8

 00000796  B9 00000019		mov ecx, h
 0000079B  BE 00000031		mov esi, 49
 000007A0			L9:
 000007A0  C6 86 00000000 R		mov maze[esi], 1;
	   01
 000007A7  83 C6 32			add esi, w
 000007AA  E2 F4		loop L9
				;end邊框
				;怪物
 000007AC  B9 00000008		mov ecx, 8

 000007B1			L10:
 000007B1  B8 0000044C		mov eax, 1100
 000007B6  E8 00000000 E	call randomrange
 000007BB  83 C0 64		add eax, 100
 000007BE  C6 80 00000000 R	mov maze[eax], 4
	   04
 000007C5  E2 EA		loop L10
				;end怪物
 000007C7  B9 00000032		mov ecx, 50

 000007CC			L11:
 000007CC  B8 0000044C		mov eax, 1100
 000007D1  E8 00000000 E	call randomrange
 000007D6  83 C0 64		add eax, 100
 000007D9  C6 80 00000000 R	mov maze[eax], 5
	   05
 000007E0  E2 EA		loop L11
 000007E2  C6 05 00000032 R		mov maze[50], 2;
	   02
 000007E9  C6 05 000004AF R		mov maze[1199], 3
	   03

				ret
 000007F5			build endp 


 000007F5			print proc uses eax
 000007F6  52				push edx
 000007F7  56				push esi
 000007F8  51				push ecx
					
 000007F9  B2 00			mov dl, 0
 000007FB  B6 05			mov dh, 5
 000007FD  E8 00000000 E	call gotoxy

 00000802  BE 00000000			mov esi, 0
 00000807  B9 00000019			mov ecx, h

 0000080C			L1:                    ;print
 0000080C  83 F9 00			cmp ecx, 0
 0000080F  0F 84 0000011E		je endl1
 00000815  51				push ecx
 00000816  B9 00000032			mov ecx, w;
 0000081B				L2:
 0000081B  83 F9 00				cmp ecx, 0
 0000081E  0F 84 000000F5			je endl2
 00000824  0F B6 86				movzx eax, maze[esi]
	   00000000 R
 0000082B  83 F8 00				cmp eax, 0
 0000082E  74 45				je L3
 00000830  83 F8 01				cmp eax, 1
 00000833  74 1C				je L4
 00000835  83 F8 02				cmp eax, 2
 00000838  74 5C				je L5
 0000083A  83 F8 03				cmp eax, 3
 0000083D  74 78				je L7
 0000083F  83 F8 04				cmp eax, 4
 00000842  0F 84 00000090			je L8
 00000848  83 F8 05				cmp eax, 5
 0000084B  0F 84 000000A4			je L9

 00000851					L4:
 00000851  B8 00000044					mov eax, 68
 00000856  E8 00000000 E				call settextcolor
 0000085B  8A 86 00000000 R				mov al, maze[esi];
 00000861  E8 00000000 E				call WriteChar
 00000866  B8 0000000F					mov eax, 15
 0000086B  E8 00000000 E				call settextcolor
				 
 00000870  E9 0000009D					jmp L6
 00000875					L3: 
 00000875  B8 00000000					mov eax, 0
 0000087A  E8 00000000 E				call settextcolor
 0000087F  8A 86 00000000 R				mov al, maze[esi]
 00000885  E8 00000000 E				call WriteChar
 0000088A  B8 0000000F					mov eax, 15
 0000088F  E8 00000000 E				call settextcolor
 00000894  EB 7C					jmp L6
 00000896					L5:
 00000896  B8 000000FF					mov eax, 255
 0000089B  E8 00000000 E				call settextcolor
 000008A0  8A 86 00000000 R				mov al, maze[esi]
 000008A6  E8 00000000 E				call WriteChar
 000008AB  B8 0000000F					mov eax, 15
 000008B0  E8 00000000 E				call settextcolor
 000008B5  EB 5B					jmp L6
 000008B7					L7:
 000008B7  B8 0000009A					mov eax, 154
 000008BC  E8 00000000 E				call settextcolor
 000008C1  8A 86 00000000 R				mov al, maze[esi]
 000008C7  E8 00000000 E				call WriteChar
 000008CC  B8 0000000F					mov eax, 15
 000008D1  E8 00000000 E				call settextcolor
 000008D6  EB 3A					jmp L6
 000008D8					L8:
 000008D8  B8 0000000B					mov eax, 11
 000008DD  E8 00000000 E				call settextcolor
 000008E2  B0 40					mov al, '@';
 000008E4  E8 00000000 E				call WriteChar
 000008E9  B8 0000000F					mov eax, 15
 000008EE  E8 00000000 E				call settextcolor
 000008F3  EB 1D					jmp L6
 000008F5					L9:
 000008F5  B8 0000000E					mov eax, 14
 000008FA  E8 00000000 E				call settextcolor
 000008FF  B0 2D					mov al, '-';
 00000901  E8 00000000 E				call WriteChar
 00000906  B8 0000000F					mov eax, 15
 0000090B  E8 00000000 E				call settextcolor
				 
 00000910  EB 00					jmp L6
 00000912					L6:
 00000912  46					inc esi
 00000913  49				dec ecx
 00000914  E9 FFFFFF02			jmp L2
 00000919				endl2:

 00000919  B8 0000000F			mov eax, 15
 0000091E  E8 00000000 E		call settextcolor 
 00000923  59				pop ecx
 00000924  49				dec ecx
					.if(ecx != 0)
 00000929  E8 00000000 E			call crlf
					.endif
 0000092E  E9 FFFFFED9		jmp L1
 00000933			endl1:
					;call crlf
 00000933  BA 0000A87E R		mov edx ,offset str1
 00000938  E8 00000000 E		call writestring
 0000093D  A1 0000A88C R		mov eax ,score
 00000942  E8 00000000 E		call writeint
 00000947  59				pop ecx
 00000948  5E				pop esi
 00000949  5A				pop edx

				ret
 0000094C			print endp


				end main
Microsoft (R) Macro Assembler Version 14.12.25835.0	    05/31/18 02:26:24
main.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000AA32 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000094C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ADDSUM . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
build  . . . . . . . . . . . . .	P Near	 00000714 _TEXT	Length= 000000E1 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000722 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000729 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 0000073A _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000743 _TEXT	
  L5 . . . . . . . . . . . . . .	L Near	 0000074A _TEXT	
  L6 . . . . . . . . . . . . . .	L Near	 00000762 _TEXT	
  L7 . . . . . . . . . . . . . .	L Near	 00000776 _TEXT	
  L8 . . . . . . . . . . . . . .	L Near	 0000078A _TEXT	
  L9 . . . . . . . . . . . . . .	L Near	 000007A0 _TEXT	
  L10  . . . . . . . . . . . . .	L Near	 000007B1 _TEXT	
  L11  . . . . . . . . . . . . .	L Near	 000007CC _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001E5 Public STDCALL
  bwhile . . . . . . . . . . . .	L Near	 00000005 _TEXT	
  bbfs . . . . . . . . . . . . .	L Near	 00000019 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 0000007A _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000008A _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000091 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 000000BE _TEXT	
  L5 . . . . . . . . . . . . . .	L Near	 000000CE _TEXT	
  L6 . . . . . . . . . . . . . .	L Near	 000000D5 _TEXT	
  L7 . . . . . . . . . . . . . .	L Near	 00000104 _TEXT	
  L8 . . . . . . . . . . . . . .	L Near	 00000114 _TEXT	
  L9 . . . . . . . . . . . . . .	L Near	 0000011B _TEXT	
  L10  . . . . . . . . . . . . .	L Near	 0000014A _TEXT	
  L11  . . . . . . . . . . . . .	L Near	 0000015A _TEXT	
  L12  . . . . . . . . . . . . .	L Near	 00000161 _TEXT	
  endbfs . . . . . . . . . . . .	L Near	 00000166 _TEXT	
  endwhile . . . . . . . . . . .	L Near	 00000176 _TEXT	
  start  . . . . . . . . . . . .	L Near	 00000180 _TEXT	
  startend . . . . . . . . . . .	L Near	 00000193 _TEXT	
master_move  . . . . . . . . . .	P Near	 0000056E _TEXT	Length= 000001A6 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000577 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000580 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000587 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 0000070F _TEXT	
move . . . . . . . . . . . . . .	P Near	 000001E5 _TEXT	Length= 00000389 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
print  . . . . . . . . . . . . .	P Near	 000007F5 _TEXT	Length= 00000157 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000080C _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000081B _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 00000851 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000875 _TEXT	
  L5 . . . . . . . . . . . . . .	L Near	 00000896 _TEXT	
  L7 . . . . . . . . . . . . . .	L Near	 000008B7 _TEXT	
  L8 . . . . . . . . . . . . . .	L Near	 000008D8 _TEXT	
  L9 . . . . . . . . . . . . . .	L Near	 000008F5 _TEXT	
  L6 . . . . . . . . . . . . . .	L Near	 00000912 _TEXT	
  endl2  . . . . . . . . . . . .	L Near	 00000919 _TEXT	
  endl1  . . . . . . . . . . . .	L Near	 00000933 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
che  . . . . . . . . . . . . . .	Byte	 0000A87D _DATA	
count  . . . . . . . . . . . . .	DWord	 0000A879 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
d  . . . . . . . . . . . . . . .	Number	 000004AFh   
endgame  . . . . . . . . . . . .	L Near	 0000019A _TEXT	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
h  . . . . . . . . . . . . . . .	Number	 00000019h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mazesize . . . . . . . . . . . .	Number	 000004E2h   
maze . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
pos  . . . . . . . . . . . . . .	DWord	 00000753 _DATA	
ratio  . . . . . . . . . . . . .	Number	 0000001Eh   
red  . . . . . . . . . . . . . .	Number	 00000004h   
re . . . . . . . . . . . . . . .	Byte	 0000A397 _DATA	
rule . . . . . . . . . . . . . .	Byte	 0000A8B8 _DATA	
score  . . . . . . . . . . . . .	DWord	 0000A88C _DATA	
stituation . . . . . . . . . . .	Byte	 0000A8B7 _DATA	
str1 . . . . . . . . . . . . . .	Byte	 0000A87E _DATA	
str2 . . . . . . . . . . . . . .	Byte	 0000A890 _DATA	
str3 . . . . . . . . . . . . . .	Byte	 0000A8AA _DATA	
s  . . . . . . . . . . . . . . .	Number	 00000032h   
visit  . . . . . . . . . . . . .	DWord	 00000757 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
w  . . . . . . . . . . . . . . .	Number	 00000032h   
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
